tmp
data$nr_events <- as.numeric(data$nr_events)
betas = c(0.1, 0.25, 0.5, 0.75, 0.9)
datasets <- unique(data$dataset)
#betas <- c(0.1)
#datasets <- c("production")
for (beta in betas) {
print(beta)
for (ds in datasets) {
print(ds)
dt_selected <- subset(data, dataset==ds)
smoothed_preds = subset(dt_selected, nr_events == 1)
smoothed_preds$smoothed_pred <- smoothed_preds$predicted
smoothed_pred_aucs <- ddply(smoothed_preds, .(dataset, nr_events, params, cls), summarize, auc=ifelse(length(unique(actual)) < 2, NA, auc(roc(actual, smoothed_pred))))
for (i in (min(dt_selected$nr_events)+1):max(dt_selected$nr_events)) {
tmp <- subset(dt_selected, nr_events == i)
tmp <- merge(tmp, smoothed_preds[smoothed_preds$nr_events==i-1,c("case_id", "smoothed_pred", "params")], by=c("case_id", "params"))
tmp$smoothed_pred = beta*tmp$smoothed_pred + (1-beta)*tmp$predicted
#tmp$smoothed_pred = tmp$smoothed_pred / (1-beta^i)
#roc_obj <- roc(tmp$actual, tmp$smoothed_pred)
#dt_auc <- ddply(tmp, .(dataset, nr_events, params, cls), summarize, auc=ifelse(length(unique(actual)) < 2, NA, auc(roc(actual, smoothed_pred))))
#dt_auc <- data.frame(auc=auc(roc_obj), nr_events=i, prediction_method=paste("smoothed", beta, sep=""))
#smoothed_pred_aucs <- rbind(smoothed_pred_aucs, dt_auc)
smoothed_preds <- rbind(smoothed_preds, tmp)
}
dt_aucs <- ddply(smoothed_preds, .(dataset, nr_events, params, cls), summarize, count=length(actual), auc=ifelse(length(unique(actual)) < 2, NA, auc(roc(actual, smoothed_pred))))
write.table(dt_aucs, sprintf("../stability_analysis/aucs_%s_%s.csv", ds, beta), sep=";", row.names=FALSE, col.names=TRUE)
dt_stability_cases <- ddply(smoothed_preds, .(dataset, params, cls, case_id), summarize, std=sd(diff(smoothed_pred)))
dt_stability_cases <- dt_stability_cases[!is.na(dt_stability_cases),]
dt_stability <- ddply(dt_stability_cases, .(dataset, params, cls), summarize, mean_std=mean(std, na.rm=TRUE), std_std=sd(std, na.rm=TRUE))
dt_stability <- dt_stability[1:nrow(dt_stability)-1,]
write.table(dt_stability, sprintf("../stability_analysis/instability_%s_%s.csv", ds, beta), sep=";", row.names=FALSE, col.names=TRUE)
}
}
dt_aucs <- read.table("../stability_analysis/aucs_orig.csv", sep=";", header=T)
dt_aucs
head(dt_aucs)
png("../stability_analysis/aucs_orig.png", width=1300, height=900)
ggplot(dt_aucs, aes(x=as.numeric(nr_events), y=auc, color=params)) + geom_point() + geom_line() + theme_bw() + facet_wrap(~dataset, scales="free")
dev.off()
dt_stability <- read.table("../stability_analysis/instability_orig.csv", sep=";", header=T)
head(dt_stability)
png("../stability_analysis/stability_orig.png", width=1300, height=900)
ggplot(dt_stability, aes(x=factor(params), y=1-mean_std, fill=params, group=params)) + geom_bar(stat="identity", color="black") +
theme_bw() + facet_wrap(~dataset, scales="free") + scale_y_continuous(limits=c(0.6,1), oob=rescale_none) + geom_text(aes(label=round(1-mean_std, 3)))
dev.off()
datasets <- c("bpic2012", "bpic2017", "sepsis", "traffic", "production", "hospital")
for (ds in datasets) {
p <- ggplot(subset(dt_aucs, grepl(ds, dataset)), aes(x=as.numeric(nr_events), y=auc, color=params)) + geom_point() + geom_line() + theme_bw() + facet_wrap(~dataset, scales="free")
g <- ggplotly(p)
link <- plotly_POST(g, filename = paste("stability_aucs", ds, sep="_"))
}
View(dt_aucs)
datasets <- c("sepsis")
for (ds in datasets) {
p <- ggplot(subset(dt_aucs, grepl(ds, dataset)), aes(x=as.numeric(nr_events), y=auc, color=params)) + geom_point() + geom_line() + theme_bw() + facet_wrap(~dataset, scales="free")
g <- ggplotly(p)
link <- plotly_POST(g, filename = paste("stability_aucs", ds, sep="_"))
}
for (ds in datasets) {
p <- ggplot(subset(dt_aucs, grepl(ds, dataset)), aes(x=as.numeric(nr_events), y=auc, color=params)) + geom_point() + geom_line() + theme_bw() + facet_wrap(~dataset, scales="free")
g <- ggplotly(p)
}
g
setwd("../stability_analysis/")
# AUCS
betas <- c(0.1, 0.25, 0.5, 0.75, 0.9)
smoothed_aucs <- data.frame()
for (beta in betas) {
result_files <- list.files(".", paste("aucs.*", as.character(beta), sep=""))
for (filename in result_files) {
tmp <- read.table(filename, sep=";", header=T, na.strings=c("None"))
tmp$beta <- beta
smoothed_aucs <- rbind(smoothed_aucs, tmp)
}
}
tmp <- read.table("../stability_analysis/aucs_orig.csv", sep=";", header=T)
tmp$beta <- 0
smoothed_aucs <- rbind(smoothed_aucs, tmp)
smoothed_aucs <- subset(smoothed_aucs, dataset != "production" | nr_events != 17)
head(smoothed_aucs)
smoothed_aucs$auc <- as.numeric(smoothed_aucs$auc)
smoothed_aucs$weighted_auc <- smoothed_aucs$auc * smoothed_aucs$count
agg_aucs <- ddply(smoothed_aucs, .(dataset, params, cls, beta), summarize, avg_auc=sum(weighted_auc)/sum(count)) # weigh by number of samples for each nr_events!!!!
head(agg_aucs)
png("../stability_analysis/aucs_all.png", width=1300, height=900)
ggplot(agg_aucs, aes(x=beta, y=avg_auc, color=params)) + geom_point() + geom_line() + theme_bw() + facet_wrap(~dataset, scales="free")
dev.off()
# Stability
betas <- c(0.1, 0.25, 0.5, 0.75, 0.9)
smoothed_stds <- data.frame()
for (beta in betas) {
result_files <- list.files(".", paste("instability.*", as.character(beta), sep=""))
for (filename in result_files) {
tmp <- read.table(filename, sep=";", header=T, na.strings=c("None"))
tmp$beta <- beta
smoothed_stds <- rbind(smoothed_stds, tmp)
}
}
tmp <- read.table("../stability_analysis/instability_orig.csv", sep=";", header=T)
tmp$beta <- 0
smoothed_stds <- rbind(smoothed_stds, tmp)
head(smoothed_stds)
ggplot(subset(smoothed_stds, beta==0.9), aes(x=factor(params), y=mean_std, fill=params, group=params)) + geom_bar(stat="identity", color="black") + theme_bw() + facet_wrap(~dataset, scales="free")
png("../stability_analysis/stability_all.png", width=1300, height=900)
ggplot(subset(smoothed_stds), aes(x=beta, y=1-mean_std, color=params)) + geom_point() + geom_line() + theme_bw() + facet_wrap(~dataset, scales="free")
dev.off()
ds <- "sepsis_cases_1"
ds <- "bpic2012_declined"
ds <- "sepsis_cases_2"
ggplot(subset(smoothed_aucs, dataset==ds) , aes(x=as.numeric(nr_events), y=as.numeric(auc), color=params)) + geom_point() + geom_line() + theme_bw() + facet_wrap(~beta, scales="free")
png("../stability_analysis/aucs_smoothed.png", width=1300, height=900)
ggplot(subset(smoothed_aucs, beta==0.9) , aes(x=as.numeric(nr_events), y=as.numeric(auc), color=params)) + geom_point() + geom_line() + theme_bw() + facet_wrap(~dataset, scales="free")
dev.off()
# merged
dt_merged <- merge(agg_aucs, smoothed_stds, by=c("dataset", "params", "cls", "beta"))
head(dt_merged)
png("../stability_analysis/stability_vs_auc.png", width=1300, height=900)
ggplot(dt_merged , aes(y=avg_auc, x=1-mean_std, color=params)) + geom_point() + geom_line() + theme_bw() + facet_wrap(~dataset, scales="free")
dev.off()
# max AUC and stability reached with each method
max_aucs <- ddply(agg_aucs, .(dataset, params), summarize, max_auc=max(avg_auc))
max_aucs_casted <- cast(max_aucs, dataset~params)
stargazer(max_aucs_casted, summary=FALSE)
smoothed_stds$stability <- 1 - smoothed_stds$mean_std
max_stabilities <- ddply(smoothed_stds, .(dataset, params), summarize, max_auc=max(stability))
max_stabilities_casted <- cast(max_stabilities, dataset~params)
stargazer(max_stabilities_casted, summary=FALSE)
max_stabilities_casted
max_aucs_casted
?stargazer
View(data)
install.packages(c("data.table", "quantreg"))
install.packages("TSA")
library(TSA)
?TSA
?arimax
data(airmiles)
plot(airmiles)
acf(diff(diff(window(log(airmiles),end=c(2001,8)),12)),lag.max=48,main='')
plot(log(airmiles),ylab='Log(airmiles)',xlab='Year', main='')
air.m1=arimax(log(airmiles),order=c(0,1,1),seasonal=list(order=c(0,1,1),
period=12),
xtransf=data.frame(I911=1*(seq(airmiles)==69), I911=1*(seq(airmiles)==69)),
transfer=list(c(0,0),c(1,0)),
xreg=data.frame(Dec96=1*(seq(airmiles)==12),
Jan97=1*(seq(airmiles)==13),Dec02=1*(seq(airmiles)==84)),method='ML')
View(air.m1)
predict(air.m1,airmiles)
xtransf=data.frame(I911=1*(seq(airmiles)==69), I911=1*(seq(airmiles)==69))
View(xtransf)
set.seed(1)
library(lubridate)
index <- ISOdatetime(2010,1,1,0,0,0)+1:8759*60*60
index
month <- month(index)
hour <- hour(index)
usage <- 1000+10*rnorm(length(index))-25*(month-6)^2-(hour-12)^2
usage <- ts(usage,frequency=24)
plot(usage)
#Create monthly dummies.  Add other xvars to this matrix
xreg <- model.matrix(~as.factor(month))[,2:12]
colnames(xreg) <- c('Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
View(xreg)
#Fit a model
library(forecast)
install.packages("forecast")
#Fit a model
library(forecast)
model <- Arima(usage, order=c(0,0,0), seasonal=list(order=c(1,0,0), period=24), xreg=xreg)
plot(usage)
lines(fitted(model),col=2)
fitted(model)
#Benchmark against other models
model2 <- tslm(usage~as.factor(month)+as.factor(hour))
model3 <- tslm(usage~as.factor(month))
model4 <- rep(mean(usage),length(usage))
#Compare the 4 models
library(plyr) #for rbind.fill
ACC <- rbind.fill(  data.frame(t(accuracy(model))),
data.frame(t(accuracy(model2))),
data.frame(t(accuracy(model3))),
data.frame(t(accuracy(model4,usage)))
)
ACC <- round(ACC,2)
ACC <- cbind(Type=c('Arima','LM1','Monthly Mean','Mean'),ACC)
ACC[order(ACC$MAE),]
View(ACC)
install.packages("glue")
set.seed(1)
library(lubridate)
index <- ISOdatetime(2010,1,1,0,0,0)+1:8759*60*60
month <- month(index)
hour <- hour(index)
usage <- 1000+10*rnorm(length(index))-25*(month-6)^2-(hour-12)^2
usage <- ts(usage,frequency=24)
#Create monthly dummies.  Add other xvars to this matrix
xreg <- model.matrix(~as.factor(month))[,2:12]
colnames(xreg) <- c('Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
#Fit a model
library(forecast)
model <- Arima(usage, order=c(0,0,0), seasonal=list(order=c(1,0,0), period=24), xreg=xreg)
plot(usage)
lines(fitted(model),col=2)
#Benchmark against other models
model2 <- tslm(usage~as.factor(month)+as.factor(hour))
model3 <- tslm(usage~as.factor(month))
model4 <- rep(mean(usage),length(usage))
#Compare the 4 models
library(plyr) #for rbind.fill
ACC <- rbind.fill(  data.frame(t(accuracy(model))),
data.frame(t(accuracy(model2))),
data.frame(t(accuracy(model3))),
data.frame(t(accuracy(model4,usage)))
)
ACC <- round(ACC,2)
ACC <- cbind(Type=c('Arima','LM1','Monthly Mean','Mean'),ACC)
ACC[order(ACC$MAE),]
library(TSA)
library(forecast)
data(airmiles)
air.m1<-arimax(log(airmiles),order=c(0,0,1),
xtransf=data.frame(I911=1*(seq(airmiles)==69)),
transfer=list(c(1,0))
)
air.m1
log(airmiles)
xtransf=data.frame(I911=1*(seq(airmiles)==69))
View(xtransf)
m
air.m1
tf<-filter(1*(seq(1:(length(airmiles)+5))==69),filter=0.5521330,method='recursive',side=1)*(-0.4936508)
tf
?filter
forecast.arima<-Arima(log(airmiles),order=c(0,0,1),xreg=tf[1:(length(tf)-5)])
forecast.arima
predict(forecast.arima,n.ahead = 5, newxreg=tf[114:length(tf)])
View(air.m1)
View(air.m1)
plot(airmiles)
airmiles
predict(forecast.arima,n.ahead = 5, newxreg=tf[114:length(tf)])
log(airmiles)
predict(forecast.arima,n.ahead = 5, newxreg=tf[114:length(tf)])
xreg=tf[1:(length(tf)-5)]
xreg
tf[1:(length(tf)-5)]
plot(tf)
plot(airmiles)
library(caret)
?caret::train()
remove.packages("RMongo", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
library(rpart)
?rpart
?rpart.control
install.packages(c("glue", "lazyeval", "robustbase", "withr"))
install.packages(c("lubridate", "openssl", "rlang", "tidyselect"))
install.packages(c("flexdashboard", "h2o", "yaml"))
setwd("/home/coderus/Temp/git/new-flow-analysis/logdata/target/")
library(readr)
target_hospital_billing_977 <- read_csv("target_hospital_billing_977.csv")
View(target_hospital_billing_977)
df =target_hospital_billing_977
mean(df$FIN[df$FIN!= -1])
mean(df$FIN[df$FIN!= -1]) / 86400
setwd("~/Temp/AMA-lato")
target = read.csv("target_hospital_billing_977.csv")
regression_activities = c(
"CHANGE_DIAGN",    "FIN",
"DELETE",    "RELEASE",
"CODE_OK",    "CODE_NOK",
"BILLED" )
max_len = 6
foo = as.data.frame(matrix(nrow = length(regression_activities), ncol = max_len))
names(foo)[1] = "activity"
foo$activity = regression_activities
foo_m = foo
foo_M = foo
i=2
dat = read.csv(sprintf("res_hospital_billing_977_%s_30.csv", i))
dat_m = read.csv(sprintf("res_hospital_billing_977_%s_3000000.csv", i))
dat = merge(dat, target, by="case_id")
dat_m = merge(dat_m, target, by="case_id")
View(dat)
mean(dat$FIN.y[dat$FIN.y!= -1]) / 86400
mean(dat$RELEASE.y[dat$RELEASE.y!= -1]) / 86400
mean(dat$CODE_OK.y[dat$CODE_OK.y!= -1]) / 86400
mean(dat$x11)
mean(dat$x11[dat$x11!=-1])
1 - mean(dat$x11[dat$x11!=-1])
mean(dat$x21[dat$x21!=-1])
mean(dat$x31[dat$x31!=-1])
round(mean(dat$x31[dat$x31!=-1]),3)
round(mean(dat$x31[dat$x31!=-1]),4)
1-round(mean(dat$x31[dat$x31!=-1]),4)
round(mean(dat$x41[dat$x41!=-1]),4)
1-round(mean(dat$x41[dat$x41!=-1]),4)
dat$DELETE.y==-1
sum(dat$DELETE.y==-1)/nrow(dat)
mean(dat$BILLED.y[dat$BILLED.y!= -1]) / 86400
setwd("~/Temp/git/new-flow-analysis/results/viz/Set2")
library(plotly)
library(ggplot2)
library(plyr)
library(extrafont)
library(gridExtra)
font_install("fontcm")
loadfonts()
logs = read.csv("../logs_summary.csv")
DT::datatable(logs, filter = "top")
dat = c()
filenames <- list.files()[grep(paste("^validation_FA2_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames) {
if(grepl("combined", filename) | grepl("index", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$nr_events < 11,]
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "FA"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
filenames4 <- list.files()[grep(paste("^validation_direct_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames4) {
if(grepl("combined", filename) | grepl("index", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$nr_events < 11,]
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "regression"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
filenames4 <- list.files()[grep(paste("^validation_Aalst_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames4) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$nr_events < 11,]
#this = this[this$metric == "mae",]
this$nr_cases = (this$nr_cases/sum(this$nr_cases))
this$score_weighted = this$score * this$nr_cases
this$method2 = this$cls
this$method3 = ""
this$filename = filename
dat = rbind(dat, this)
}
print(nrow(dat))
filenames4 <- list.files()[grep(paste("^validation_SPN_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames4) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$nr_events < 11,]
#this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = this$cls
this$method3 = ""
this$filename = filename
dat = rbind(dat, this)
}
print(nrow(dat))
dat$method3[dat$method3 == "3000000.csv"] = "mean"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "FA"] = "predictive"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "regression"] = "simple"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "isotonic_FA"] = "isotonic"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "sigmoid_FA"] = "sigmoid"
dat$method3[dat$method3 == "5.csv"] = "adaptive"
dat$method3[dat$method3 == "10.csv"] = "adaptive"
dat$method3[dat$method3 == "20.csv"] = "adaptive"
dat$method3[dat$method3 == "sqrt.csv"] = "adaptive"
dat$method4 = paste(dat$method3, dat$method2, dat$method, sep = "_")
dat$score = dat$score / (3600*24) # make days
dat$score_weighted = dat$score_weighted / (3600*24)
agg_MAE_unw = as.data.frame(aggregate(dat$score,by=list(dataset=dat$dataset, method=dat$method4), mean))
agg_MAE_w = as.data.frame(aggregate(dat$score_weighted,by=list(dataset=dat$dataset, method=dat$method4), sum))
agg_MAE_unw[,3] = round(agg_MAE_unw[,3], 3)
agg_MAE_w[,3] = round(agg_MAE_w[,3], 3)
colnames(agg_MAE_unw)[3] = "Avg_unweighted_MAE_days"
colnames(agg_MAE_w)[3] = "Avg_weighted_MAE_days"
agg_MAE = merge(agg_MAE_w, agg_MAE_unw)
agg_MAE = agg_MAE[with(agg_MAE, order(dataset, Avg_weighted_MAE_days, method = "radix")), ]
DT::datatable(agg_MAE, filter = "top")
tmp = ddply(dat, .(dataset,method4), summarize, std=sd(score))
tmp$std = round(tmp$std,3)
names(tmp)[2]="method"
agg_MAE = merge(agg_MAE, tmp)
agg_MAE$Avg_unweighted_MAE_days=NULL
agg_MAE = agg_MAE[with(agg_MAE, order(dataset, Avg_weighted_MAE_days, method = "radix")), ]
DT::datatable(agg_MAE, filter = "top")
dat$method4[dat$method4=="_best_Aalst"] = "TS (best)"
dat$method4[dat$method4=="adaptive_FA_zero_combined"] = "adaptive FA"
dat$method4[dat$method4=="mean_FA_zero_combined"] = "mean FA"
dat$method4[dat$method4=="predictive_FA_prefix_index"] = "predictive FA (multiple)"
dat$method4[dat$method4=="predictive_FA_zero_combined"] = "predictive FA (single)"
dat$method4[dat$method4=="simple_regression_prefix_index"] = "black box (multiple)"
dat$method4[dat$method4=="simple_regression_zero_combined"] = "black box (single)"
dat$method4[dat$method4=="_SPN_Rogge-Solti"] = "stochastic Petri net"
levels(dat$dataset)[1] = "BPIC'12 A"
levels(dat$dataset)[2] = "BPIC'12 O"
levels(dat$dataset)[3] = "BPIC'12 W_n|1|"
levels(dat$dataset)[4] = "BPIC'12 W"
levels(dat$dataset)[5] = "CR"
levels(dat$dataset)[6] = "Helpdesk"
levels(dat$dataset)[7] = "Hospital"
levels(dat$dataset)[8] = "Invoice"
levels(dat$dataset)[9] = "RTFMP"
for (df in levels(dat$dataset)) {
p = ggplot(dat[dat$dataset == df,], aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
#facet_wrap(~ dataset, ncol = 3, scales = "free") +
ylab("MAE, days") + xlab("Prefix length")+
ggtitle(df)
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
print(p)
}
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
p = ggplot(dat, aes(x = nr_events, y = score, color = method4)) + geom_point(size=0.5) + geom_line(size=0.4) +
facet_wrap(~ dataset, ncol = 3, scales = "free") + ylab("MAE, days") + xlab("Prefix length")+
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank()) +
theme(text=element_text(size=10))+
theme(axis.text=element_text(colour="black"))+
#scale_color_manual(values=c("black","red","blue","darkgreen","orange","darkblue","violet","gray"))+
scale_colour_manual(values=cbPalette)
#api_create(p, "flow-analysis-MAE-all", sharing = "public")
pdf(file="MAE-all.pdf",family="CM Roman",width=6,height=6)
print(p)
dev.off()
embed_fonts("MAE-all.pdf",outfile="MAE-all.pdf")
agg_MAE$method[agg_MAE$method=="_best_Aalst"] = "TS (best)"
agg_MAE$method[agg_MAE$method=="adaptive_FA_zero_combined"] = "adaptive FA"
agg_MAE$method[agg_MAE$method=="mean_FA_zero_combined"] = "mean FA"
agg_MAE$method[agg_MAE$method=="predictive_FA_prefix_index"] = "predictive FA (multiple)"
agg_MAE$method[agg_MAE$method=="predictive_FA_zero_combined"] = "predictive FA (single)"
agg_MAE$method[agg_MAE$method=="simple_regression_prefix_index"] = "black box (multiple)"
agg_MAE$method[agg_MAE$method=="simple_regression_zero_combined"] = "black box (single)"
agg_MAE$method[agg_MAE$method=="_SPN_Rogge-Solti"] = "stochastic Petri net"
dat = data.frame()
for (dset in levels(agg_MAE$dataset)) {
df = agg_MAE[agg_MAE$dataset==dset,]
df$Order = rank(df$Avg_weighted_MAE_days,ties.method = "min")
dat = rbind(dat, df)
}
dat_ = ddply(dat, .(method), summarize, Mean=mean(Order))
foo = ddply(dat, .(method), summarize, std=sd(Order))
dat_ = merge(dat_,foo)
dat_ = dat_[order(dat_$Mean),]
pdf(file="mean-ranking.pdf",family="CM Roman",width=4,height=2)
p=ggplot(dat_, aes(x=reorder(method, -Mean), y=Mean, fill=method, group=method)) +
geom_bar(stat="identity") + theme(text=element_text(size=24))+
geom_errorbar(aes(ymin=Mean-std, ymax=Mean+std),width=.2) +
theme_bw() + coord_flip() + theme(legend.position="none") + ylab("mean ranking")+
theme(axis.title.y=element_blank(),axis.text=element_text(color="black"),axis.ticks.y=element_blank())+
scale_y_continuous(expand = c(0,0), limits=c(0,9),breaks = seq(1,7,2), labels =as.character(seq(1,7,2)))+
scale_fill_manual(values=cbPalette)
print(p)
dev.off()
embed_fonts("mean-ranking.pdf",outfile="mean-ranking.pdf")
dat$case_duration = 0
dat$case_duration[dat$dataset=="BPI2012A"] = 7.5
dat$case_duration[dat$dataset=="BPI2012O"] = 15.1
dat$case_duration[dat$dataset=="BPI2012W"] = 11.4
dat$case_duration[dat$dataset=="BPI2012W_no_dup"] = 11.4
dat$case_duration[dat$dataset=="CreditRequirement"] = 0.95
dat$case_duration[dat$dataset=="helpdesk"] = 7.3
dat$case_duration[dat$dataset=="minit_invoice_10"] = 2.225
dat$case_duration[dat$dataset=="traffic_fines_139"] = 582
dat$case_duration[dat$dataset=="hospital_billing_977"] = 165.2
dat$Avg_weighted_MAE_days = dat$Avg_weighted_MAE_days / dat$case_duration
dat$std = dat$std / dat$case_duration
dat$Order = NULL
dat_ = ddply(dat, .(method), summarize, Mean=mean(Avg_weighted_MAE_days))
foo = ddply(dat, .(method), summarize, std=sd(Avg_weighted_MAE_days))
dat_ = merge(dat_,foo)
pdf(file="mean-ranking2.pdf",family="CM Roman",width=4,height=2)
p=ggplot(dat_, aes(x=reorder(method, -Mean), y=Mean, fill=method, group=method)) +
geom_bar(stat="identity") + theme(text=element_text(size=24))+
geom_errorbar(aes(ymin=Mean-std, ymax=Mean+std),width=.2) +
theme_bw() + coord_flip() + theme(legend.position="none") + ylab("Average normalized MAE")+
theme(axis.title.y=element_blank(),axis.text=element_text(color="black"),axis.ticks.y=element_blank())+
scale_y_continuous(expand = c(0,0), limits=c(0,0.9), breaks = seq(0,0.8,0.2), labels =as.character(seq(0,0.8,0.2)))+
scale_fill_manual(values=cbPalette)
print(p)
dev.off()
embed_fonts("mean-ranking2.pdf",outfile="mean-ranking2.pdf")
dat_ = ddply(dat, .(method), summarize, Mean=mean(std))
foo = ddply(dat, .(method), summarize, Std=sd(std))
dat_ = merge(dat_,foo)
pdf(file="mean-ranking3.pdf",family="CM Roman",width=4,height=2)
p=ggplot(dat_, aes(x=reorder(method, -Mean), y=Mean, fill=method, group=method)) +
geom_bar(stat="identity") + theme(text=element_text(size=24))+
geom_errorbar(aes(ymin=Mean-Std, ymax=Mean+Std),width=.2) +
theme_bw() + coord_flip() + theme(legend.position="none") + ylab("Average normalized standard deviation")+
theme(axis.title.y=element_blank(),axis.text=element_text(color="black"),axis.ticks.y=element_blank())+
scale_y_continuous(expand = c(0,0), limits=c(-0.02,0.45), breaks = seq(0,0.4,0.1), labels =as.character(seq(0,0.4,0.1)))+
scale_fill_manual(values=cbPalette)
print(p)
dev.off()
embed_fonts("mean-ranking3.pdf",outfile="mean-ranking3.pdf")
