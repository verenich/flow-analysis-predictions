library(extrafont)
library(gridExtra)
font_install("fontcm")
loadfonts()
logs = read.csv("../logs_summary.csv")
DT::datatable(logs, filter = "top")
dat = c()
filenames <- list.files()[grep(paste("^validation_FA2_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames) {
if(grepl("combined", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "FA"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
filenames4 <- list.files()[grep(paste("^validation_direct_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames4) {
if(grepl("combined", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "regression"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
dat$method3[dat$method3 == "3000000.csv"] = "mean"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "FA"] = "predictive"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "regression"] = "simple"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "isotonic_FA"] = "isotonic"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "sigmoid_FA"] = "sigmoid"
dat$method3[dat$method3 == "5.csv"] = "adaptive"
dat$method3[dat$method3 == "10.csv"] = "adaptive"
dat$method3[dat$method3 == "20.csv"] = "adaptive"
dat$method3[dat$method3 == "sqrt.csv"] = "adaptive"
dat$method4 = paste(dat$method3, dat$method2, sep = "_")
dat$score = dat$score / (3600*24) # make days
dat$score_weighted = dat$score_weighted / (3600*24)
agg_MAE_unw = as.data.frame(aggregate(dat$score,by=list(dataset=dat$dataset, method=dat$method4), mean))
agg_MAE_w = as.data.frame(aggregate(dat$score_weighted,by=list(dataset=dat$dataset, method=dat$method4), sum))
agg_MAE_unw[,3] = round(agg_MAE_unw[,3], 3)
agg_MAE_w[,3] = round(agg_MAE_w[,3], 3)
colnames(agg_MAE_unw)[3] = "Avg_unweighted_MAE_days"
colnames(agg_MAE_w)[3] = "Avg_weighted_MAE_days"
agg_MAE = merge(agg_MAE_w, agg_MAE_unw)
agg_MAE = agg_MAE[with(agg_MAE, order(dataset, Avg_weighted_MAE_days, method = "radix")), ]
DT::datatable(agg_MAE, filter = "top")
for (df in levels(dat$dataset)) {
p = ggplot(dat[dat$dataset == df,], aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
#facet_wrap(~ dataset, ncol = 3, scales = "free") +
ylab("MAE, days") + xlab("Prefix length")+
ggtitle(df)
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
print(p)
}
p = ggplot(dat, aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
facet_wrap(~ dataset, ncol = 3, scales = "free") + ylab("MAE, days") + xlab("Prefix length")+
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
api_create(p, "flow-analysis-MAE-all", sharing = "public")
pdf(file="MAE-all.pdf",family="CM Roman",width=12,height=10)
print(p)
dev.off()
embed_fonts("MAE-all.pdf",outfile="MAE-all.pdf")
library(plotly)
library(ggplot2)
library(extrafont)
library(gridExtra)
font_install("fontcm")
loadfonts()
logs = read.csv("../logs_summary.csv")
DT::datatable(logs, filter = "top")
dat = c()
filenames <- list.files()[grep(paste("^validation_FA2_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames) {
if(grepl("combined", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "FA"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
filenames4 <- list.files()[grep(paste("^validation_direct_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames4) {
if(grepl("combined", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "regression"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
dat$method3[dat$method3 == "3000000.csv"] = "mean"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "FA"] = "predictive"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "regression"] = "simple"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "isotonic_FA"] = "isotonic"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "sigmoid_FA"] = "sigmoid"
dat$method3[dat$method3 == "5.csv"] = "adaptive"
dat$method3[dat$method3 == "10.csv"] = "adaptive"
dat$method3[dat$method3 == "20.csv"] = "adaptive"
dat$method3[dat$method3 == "sqrt.csv"] = "adaptive"
dat$method4 = paste(dat$method3, dat$method2, sep = "_")
dat$score = dat$score / (3600*24) # make days
dat$score_weighted = dat$score_weighted / (3600*24)
agg_MAE_unw = as.data.frame(aggregate(dat$score,by=list(dataset=dat$dataset, method=dat$method4), mean))
agg_MAE_w = as.data.frame(aggregate(dat$score_weighted,by=list(dataset=dat$dataset, method=dat$method4), sum))
agg_MAE_unw[,3] = round(agg_MAE_unw[,3], 3)
agg_MAE_w[,3] = round(agg_MAE_w[,3], 3)
colnames(agg_MAE_unw)[3] = "Avg_unweighted_MAE_days"
colnames(agg_MAE_w)[3] = "Avg_weighted_MAE_days"
agg_MAE = merge(agg_MAE_w, agg_MAE_unw)
agg_MAE = agg_MAE[with(agg_MAE, order(dataset, Avg_weighted_MAE_days, method = "radix")), ]
DT::datatable(agg_MAE, filter = "top")
for (df in levels(dat$dataset)) {
p = ggplot(dat[dat$dataset == df,], aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
#facet_wrap(~ dataset, ncol = 3, scales = "free") +
ylab("MAE, days") + xlab("Prefix length")+
ggtitle(df)
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
print(p)
}
p = ggplot(dat, aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
facet_wrap(~ dataset, ncol = 3, scales = "free") + ylab("MAE, days") + xlab("Prefix length")+
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
api_create(p, "flow-analysis-MAE-all", sharing = "public")
pdf(file="MAE-all.pdf",family="CM Roman",width=12,height=10)
print(p)
dev.off()
embed_fonts("MAE-all.pdf",outfile="MAE-all.pdf")
library(plotly)
library(ggplot2)
library(extrafont)
library(gridExtra)
font_install("fontcm")
loadfonts()
logs = read.csv("../logs_summary.csv")
DT::datatable(logs, filter = "top")
dat = c()
filenames <- list.files()[grep(paste("^validation_FA2_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames) {
if(grepl("combined", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "FA"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
filenames4 <- list.files()[grep(paste("^validation_direct_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames4) {
if(grepl("combined", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "regression"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
dat$method3[dat$method3 == "3000000.csv"] = "mean"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "FA"] = "predictive"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "regression"] = "simple"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "isotonic_FA"] = "isotonic"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "sigmoid_FA"] = "sigmoid"
dat$method3[dat$method3 == "5.csv"] = "adaptive"
dat$method3[dat$method3 == "10.csv"] = "adaptive10"
dat$method3[dat$method3 == "20.csv"] = "adaptive"
dat$method3[dat$method3 == "sqrt.csv"] = "adaptivex2"
dat$method4 = paste(dat$method3, dat$method2, sep = "_")
dat$score = dat$score / (3600*24) # make days
dat$score_weighted = dat$score_weighted / (3600*24)
agg_MAE_unw = as.data.frame(aggregate(dat$score,by=list(dataset=dat$dataset, method=dat$method4), mean))
agg_MAE_w = as.data.frame(aggregate(dat$score_weighted,by=list(dataset=dat$dataset, method=dat$method4), sum))
agg_MAE_unw[,3] = round(agg_MAE_unw[,3], 3)
agg_MAE_w[,3] = round(agg_MAE_w[,3], 3)
colnames(agg_MAE_unw)[3] = "Avg_unweighted_MAE_days"
colnames(agg_MAE_w)[3] = "Avg_weighted_MAE_days"
agg_MAE = merge(agg_MAE_w, agg_MAE_unw)
agg_MAE = agg_MAE[with(agg_MAE, order(dataset, Avg_weighted_MAE_days, method = "radix")), ]
DT::datatable(agg_MAE, filter = "top")
for (df in levels(dat$dataset)) {
p = ggplot(dat[dat$dataset == df,], aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
#facet_wrap(~ dataset, ncol = 3, scales = "free") +
ylab("MAE, days") + xlab("Prefix length")+
ggtitle(df)
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
print(p)
}
p = ggplot(dat, aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
facet_wrap(~ dataset, ncol = 3, scales = "free") + ylab("MAE, days") + xlab("Prefix length")+
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
api_create(p, "flow-analysis-MAE-all", sharing = "public")
pdf(file="MAE-all.pdf",family="CM Roman",width=12,height=10)
print(p)
dev.off()
embed_fonts("MAE-all.pdf",outfile="MAE-all.pdf")
library(plotly)
library(ggplot2)
library(extrafont)
library(gridExtra)
font_install("fontcm")
loadfonts()
logs = read.csv("../logs_summary.csv")
DT::datatable(logs, filter = "top")
dat = c()
filenames <- list.files()[grep(paste("^validation_FA2_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames) {
if(grepl("combined", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "FA"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
filenames4 <- list.files()[grep(paste("^validation_direct_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames4) {
if(grepl("combined", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "regression"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
dat$method3[dat$method3 == "3000000.csv"] = "mean"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "FA"] = "predictive"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "regression"] = "simple"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "isotonic_FA"] = "isotonic"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "sigmoid_FA"] = "sigmoid"
dat$method3[dat$method3 == "5.csv"] = "adaptive"
dat$method3[dat$method3 == "10.csv"] = "adaptive"
dat$method3[dat$method3 == "20.csv"] = "adaptive"
dat$method3[dat$method3 == "sqrt.csv"] = "adaptive"
dat$method4 = paste(dat$method3, dat$method2, sep = "_")
dat$score = dat$score / (3600*24) # make days
dat$score_weighted = dat$score_weighted / (3600*24)
agg_MAE_unw = as.data.frame(aggregate(dat$score,by=list(dataset=dat$dataset, method=dat$method4), mean))
agg_MAE_w = as.data.frame(aggregate(dat$score_weighted,by=list(dataset=dat$dataset, method=dat$method4), sum))
agg_MAE_unw[,3] = round(agg_MAE_unw[,3], 3)
agg_MAE_w[,3] = round(agg_MAE_w[,3], 3)
colnames(agg_MAE_unw)[3] = "Avg_unweighted_MAE_days"
colnames(agg_MAE_w)[3] = "Avg_weighted_MAE_days"
agg_MAE = merge(agg_MAE_w, agg_MAE_unw)
agg_MAE = agg_MAE[with(agg_MAE, order(dataset, Avg_weighted_MAE_days, method = "radix")), ]
DT::datatable(agg_MAE, filter = "top")
for (df in levels(dat$dataset)) {
p = ggplot(dat[dat$dataset == df,], aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
#facet_wrap(~ dataset, ncol = 3, scales = "free") +
ylab("MAE, days") + xlab("Prefix length")+
ggtitle(df)
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
print(p)
}
p = ggplot(dat, aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
facet_wrap(~ dataset, ncol = 3, scales = "free") + ylab("MAE, days") + xlab("Prefix length")+
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
api_create(p, "flow-analysis-MAE-all", sharing = "public")
pdf(file="MAE-all.pdf",family="CM Roman",width=12,height=10)
print(p)
dev.off()
embed_fonts("MAE-all.pdf",outfile="MAE-all.pdf")
library(plotly)
library(ggplot2)
library(extrafont)
library(gridExtra)
font_install("fontcm")
loadfonts()
logs = read.csv("../logs_summary.csv")
DT::datatable(logs, filter = "top")
dat = c()
filenames <- list.files()[grep(paste("^validation_FA2_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames) {
if(grepl("combined", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "FA"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
filenames4 <- list.files()[grep(paste("^validation_direct_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames4) {
if(grepl("combined", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "regression"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
dat$method3[dat$method3 == "3000000.csv"] = "mean"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "FA"] = "predictive"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "regression"] = "simple"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "isotonic_FA"] = "isotonic"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "sigmoid_FA"] = "sigmoid"
dat$method3[dat$method3 == "5.csv"] = "adaptive"
dat$method3[dat$method3 == "10.csv"] = "adaptive"
dat$method3[dat$method3 == "20.csv"] = "adaptive"
dat$method3[dat$method3 == "sqrt.csv"] = "adaptive"
dat$method4 = paste(dat$method3, dat$method2, dat$method, sep = "_")
dat$score = dat$score / (3600*24) # make days
dat$score_weighted = dat$score_weighted / (3600*24)
agg_MAE_unw = as.data.frame(aggregate(dat$score,by=list(dataset=dat$dataset, method=dat$method4), mean))
agg_MAE_w = as.data.frame(aggregate(dat$score_weighted,by=list(dataset=dat$dataset, method=dat$method4), sum))
agg_MAE_unw[,3] = round(agg_MAE_unw[,3], 3)
agg_MAE_w[,3] = round(agg_MAE_w[,3], 3)
colnames(agg_MAE_unw)[3] = "Avg_unweighted_MAE_days"
colnames(agg_MAE_w)[3] = "Avg_weighted_MAE_days"
agg_MAE = merge(agg_MAE_w, agg_MAE_unw)
agg_MAE = agg_MAE[with(agg_MAE, order(dataset, Avg_weighted_MAE_days, method = "radix")), ]
DT::datatable(agg_MAE, filter = "top")
for (df in levels(dat$dataset)) {
p = ggplot(dat[dat$dataset == df,], aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
#facet_wrap(~ dataset, ncol = 3, scales = "free") +
ylab("MAE, days") + xlab("Prefix length")+
ggtitle(df)
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
print(p)
}
p = ggplot(dat, aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
facet_wrap(~ dataset, ncol = 3, scales = "free") + ylab("MAE, days") + xlab("Prefix length")+
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
api_create(p, "flow-analysis-MAE-all", sharing = "public")
pdf(file="MAE-all.pdf",family="CM Roman",width=12,height=10)
print(p)
dev.off()
embed_fonts("MAE-all.pdf",outfile="MAE-all.pdf")
View(dat)
table(dat$method)
dat = c()
filenames <- list.files()[grep(paste("^validation_FA2_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames) {
if(grepl("combined", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "FA"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
table(dat$method)
filenames
library(plotly)
library(ggplot2)
library(extrafont)
library(gridExtra)
font_install("fontcm")
loadfonts()
logs = read.csv("../logs_summary.csv")
DT::datatable(logs, filter = "top")
dat = c()
filenames <- list.files()[grep(paste("^validation_FA2_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames) {
if(grepl("combined", filename) | grepl("index", filename) | grepl("index", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "FA"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
filenames4 <- list.files()[grep(paste("^validation_direct_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames4) {
if(grepl("combined", filename) | grepl("index", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "regression"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
dat$method3[dat$method3 == "3000000.csv"] = "mean"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "FA"] = "predictive"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "regression"] = "simple"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "isotonic_FA"] = "isotonic"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "sigmoid_FA"] = "sigmoid"
dat$method3[dat$method3 == "5.csv"] = "adaptive"
dat$method3[dat$method3 == "10.csv"] = "adaptive"
dat$method3[dat$method3 == "20.csv"] = "adaptive"
dat$method3[dat$method3 == "sqrt.csv"] = "adaptive"
dat$method4 = paste(dat$method3, dat$method2, dat$method, sep = "_")
dat$score = dat$score / (3600*24) # make days
dat$score_weighted = dat$score_weighted / (3600*24)
agg_MAE_unw = as.data.frame(aggregate(dat$score,by=list(dataset=dat$dataset, method=dat$method4), mean))
agg_MAE_w = as.data.frame(aggregate(dat$score_weighted,by=list(dataset=dat$dataset, method=dat$method4), sum))
agg_MAE_unw[,3] = round(agg_MAE_unw[,3], 3)
agg_MAE_w[,3] = round(agg_MAE_w[,3], 3)
colnames(agg_MAE_unw)[3] = "Avg_unweighted_MAE_days"
colnames(agg_MAE_w)[3] = "Avg_weighted_MAE_days"
agg_MAE = merge(agg_MAE_w, agg_MAE_unw)
agg_MAE = agg_MAE[with(agg_MAE, order(dataset, Avg_weighted_MAE_days, method = "radix")), ]
DT::datatable(agg_MAE, filter = "top")
for (df in levels(dat$dataset)) {
p = ggplot(dat[dat$dataset == df,], aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
#facet_wrap(~ dataset, ncol = 3, scales = "free") +
ylab("MAE, days") + xlab("Prefix length")+
ggtitle(df)
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
print(p)
}
p = ggplot(dat, aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
facet_wrap(~ dataset, ncol = 3, scales = "free") + ylab("MAE, days") + xlab("Prefix length")+
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
api_create(p, "flow-analysis-MAE-all", sharing = "public")
pdf(file="MAE-all.pdf",family="CM Roman",width=12,height=10)
print(p)
dev.off()
embed_fonts("MAE-all.pdf",outfile="MAE-all.pdf")
table(dat$method)
table(dat$method4)
install.packages(c("backports", "curl", "digest", "foreach", "iterators", "yaml"))
