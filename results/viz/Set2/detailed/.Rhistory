dat$score_weighted = dat$score_weighted / (3600*24)
agg_MAE_unw = as.data.frame(aggregate(dat$score,by=list(dataset=dat$dataset, method=dat$method4), mean))
agg_MAE_w = as.data.frame(aggregate(dat$score_weighted,by=list(dataset=dat$dataset, method=dat$method4), sum))
agg_MAE_unw[,3] = round(agg_MAE_unw[,3], 3)
agg_MAE_w[,3] = round(agg_MAE_w[,3], 3)
colnames(agg_MAE_unw)[3] = "Avg_unweighted_MAE_days"
colnames(agg_MAE_w)[3] = "Avg_weighted_MAE_days"
agg_MAE = merge(agg_MAE_w, agg_MAE_unw)
agg_MAE = agg_MAE[with(agg_MAE, order(dataset, Avg_weighted_MAE_days, method = "radix")), ]
DT::datatable(agg_MAE, filter = "top")
for (df in levels(dat$dataset)) {
p = ggplot(dat[dat$dataset == df,], aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
#facet_wrap(~ dataset, ncol = 3, scales = "free") +
ylab("MAE, days") + xlab("Prefix length")+
ggtitle(df)
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
print(p)
}
p = ggplot(dat, aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
facet_wrap(~ dataset, ncol = 3, scales = "free") + ylab("MAE, days") + xlab("Prefix length")+
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
api_create(p, "flow-analysis-MAE-all", sharing = "public")
pdf(file="MAE-all.pdf",family="CM Roman",width=12,height=10)
print(p)
dev.off()
embed_fonts("MAE-all.pdf",outfile="MAE-all.pdf")
library(plotly)
library(ggplot2)
library(extrafont)
library(gridExtra)
font_install("fontcm")
loadfonts()
logs = read.csv("../logs_summary.csv")
DT::datatable(logs, filter = "top")
dat = c()
filenames <- list.files()[grep(paste("^validation_FA2_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames) {
if(grepl("combined", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "FA"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
filenames4 <- list.files()[grep(paste("^validation_direct_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames4) {
if(grepl("combined", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "regression"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
dat$method3[dat$method3 == "3000000.csv"] = "mean"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "FA"] = "predictive"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "regression"] = "simple"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "isotonic_FA"] = "isotonic"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "sigmoid_FA"] = "sigmoid"
dat$method3[dat$method3 == "5.csv"] = "adaptive"
dat$method3[dat$method3 == "10.csv"] = "adaptive"
dat$method3[dat$method3 == "20.csv"] = "adaptive"
dat$method3[dat$method3 == "sqrt.csv"] = "adaptive"
dat$method4 = paste(dat$method3, dat$method2, dat$method, sep = "_")
dat$score = dat$score / (3600*24) # make days
dat$score_weighted = dat$score_weighted / (3600*24)
agg_MAE_unw = as.data.frame(aggregate(dat$score,by=list(dataset=dat$dataset, method=dat$method4), mean))
agg_MAE_w = as.data.frame(aggregate(dat$score_weighted,by=list(dataset=dat$dataset, method=dat$method4), sum))
agg_MAE_unw[,3] = round(agg_MAE_unw[,3], 3)
agg_MAE_w[,3] = round(agg_MAE_w[,3], 3)
colnames(agg_MAE_unw)[3] = "Avg_unweighted_MAE_days"
colnames(agg_MAE_w)[3] = "Avg_weighted_MAE_days"
agg_MAE = merge(agg_MAE_w, agg_MAE_unw)
agg_MAE = agg_MAE[with(agg_MAE, order(dataset, Avg_weighted_MAE_days, method = "radix")), ]
DT::datatable(agg_MAE, filter = "top")
for (df in levels(dat$dataset)) {
p = ggplot(dat[dat$dataset == df,], aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
#facet_wrap(~ dataset, ncol = 3, scales = "free") +
ylab("MAE, days") + xlab("Prefix length")+
ggtitle(df)
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
print(p)
}
p = ggplot(dat, aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
facet_wrap(~ dataset, ncol = 3, scales = "free") + ylab("MAE, days") + xlab("Prefix length")+
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
api_create(p, "flow-analysis-MAE-all", sharing = "public")
pdf(file="MAE-all.pdf",family="CM Roman",width=12,height=10)
print(p)
dev.off()
embed_fonts("MAE-all.pdf",outfile="MAE-all.pdf")
View(dat)
table(dat$method)
dat = c()
filenames <- list.files()[grep(paste("^validation_FA2_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames) {
if(grepl("combined", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "FA"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
table(dat$method)
filenames
library(plotly)
library(ggplot2)
library(extrafont)
library(gridExtra)
font_install("fontcm")
loadfonts()
logs = read.csv("../logs_summary.csv")
DT::datatable(logs, filter = "top")
dat = c()
filenames <- list.files()[grep(paste("^validation_FA2_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames) {
if(grepl("combined", filename) | grepl("index", filename) | grepl("index", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "FA"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
filenames4 <- list.files()[grep(paste("^validation_direct_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
for (filename in filenames4) {
if(grepl("combined", filename) | grepl("index", filename)) {
this = read.csv(filename, sep=",", header = TRUE)
this = this[this$metric == "mae",]
this$nr_cases = this$nr_cases/sum(this$nr_cases)
this$score_weighted = this$score * this$nr_cases
this$method2 = "regression"
this$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
this$filename = filename
dat = rbind(dat, this)
}
}
print(nrow(dat))
dat$method3[dat$method3 == "3000000.csv"] = "mean"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "FA"] = "predictive"
dat$method3[dat$method3 == "30.csv" & dat$method2 == "regression"] = "simple"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "isotonic_FA"] = "isotonic"
# dat$method3[dat$method3 == "30.csv" & dat$method2 == "sigmoid_FA"] = "sigmoid"
dat$method3[dat$method3 == "5.csv"] = "adaptive"
dat$method3[dat$method3 == "10.csv"] = "adaptive"
dat$method3[dat$method3 == "20.csv"] = "adaptive"
dat$method3[dat$method3 == "sqrt.csv"] = "adaptive"
dat$method4 = paste(dat$method3, dat$method2, dat$method, sep = "_")
dat$score = dat$score / (3600*24) # make days
dat$score_weighted = dat$score_weighted / (3600*24)
agg_MAE_unw = as.data.frame(aggregate(dat$score,by=list(dataset=dat$dataset, method=dat$method4), mean))
agg_MAE_w = as.data.frame(aggregate(dat$score_weighted,by=list(dataset=dat$dataset, method=dat$method4), sum))
agg_MAE_unw[,3] = round(agg_MAE_unw[,3], 3)
agg_MAE_w[,3] = round(agg_MAE_w[,3], 3)
colnames(agg_MAE_unw)[3] = "Avg_unweighted_MAE_days"
colnames(agg_MAE_w)[3] = "Avg_weighted_MAE_days"
agg_MAE = merge(agg_MAE_w, agg_MAE_unw)
agg_MAE = agg_MAE[with(agg_MAE, order(dataset, Avg_weighted_MAE_days, method = "radix")), ]
DT::datatable(agg_MAE, filter = "top")
for (df in levels(dat$dataset)) {
p = ggplot(dat[dat$dataset == df,], aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
#facet_wrap(~ dataset, ncol = 3, scales = "free") +
ylab("MAE, days") + xlab("Prefix length")+
ggtitle(df)
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
print(p)
}
p = ggplot(dat, aes(x = nr_events, y = score, color = method4)) + geom_point() + geom_line() +
facet_wrap(~ dataset, ncol = 3, scales = "free") + ylab("MAE, days") + xlab("Prefix length")+
theme(legend.position="top")+
theme(panel.background = element_rect(fill = 'white', colour = 'black',size=0.5)) +
theme(panel.grid.major = element_line(colour = 'lightgrey', size = 0.3))+
theme(legend.background = element_rect(colour = 'white',size = 0.1, linetype='solid'))+
theme(legend.title=element_blank())
api_create(p, "flow-analysis-MAE-all", sharing = "public")
pdf(file="MAE-all.pdf",family="CM Roman",width=12,height=10)
print(p)
dev.off()
embed_fonts("MAE-all.pdf",outfile="MAE-all.pdf")
table(dat$method)
table(dat$method4)
install.packages(c("backports", "curl", "digest", "foreach", "iterators", "yaml"))
# stability
dt_stability_cases <- ddply(data, .(dataset, method, cls, case_id), summarize, std=sd(predicted-actual))
library(hydroGOF)
library(plyr)
setwd("detailed/")
remove_prefix_nr_from_caseid <- function(row) {
case_id <- row["case_id"]
parts <- strsplit(case_id, "_")[[1]]
cut_length <- ifelse(as.numeric(row["nr_events"]) < 2, length(parts), length(parts)-1)
return(paste(parts[1:cut_length], collapse="_"))
}
result_files1 <- list.files()[grep(paste("^validation_FA2_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
result_files2 <- list.files()[grep(paste("^validation_direct_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
data <- data.frame()
for (filename in result_files1) {
tmp <- read.table(filename, sep=";", header=T, na.strings=c("None"))
#if (!grepl("lstm", filename)) {
tmp$case_id <- as.character(tmp$case_id)
tmp$nr_events <- as.numeric(as.character(tmp$nr_events))
tmp$case_id <- apply(tmp, 1, remove_prefix_nr_from_caseid)
datasetname = strsplit(filename,"_zero")[[1]][1]
tmp$dataset = strsplit(datasetname,"FA2_")[[1]][2]
tmp$method2 = "FA"
tmp$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
#}
data <- rbind(data, tmp)
}
for (filename in result_files2) {
tmp <- read.table(filename, sep=";", header=T, na.strings=c("None"))
#if (!grepl("lstm", filename)) {
tmp$case_id <- as.character(tmp$case_id)
tmp$nr_events <- as.numeric(as.character(tmp$nr_events))
tmp$case_id <- apply(tmp, 1, remove_prefix_nr_from_caseid)
datasetname = strsplit(filename,"_zero")[[1]][1]
tmp$dataset = strsplit(datasetname,"direct_")[[1]][2]
tmp$method2 = "regression"
tmp$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
#}
data <- rbind(data, tmp)
}
data$method3[data$method3 == "3000000.csv"] = "mean"
data$method3[data$method3 == "30.csv" & data$method2 == "FA"] = "predictive"
data$method3[data$method3 == "30.csv" & data$method2 == "regression"] = "simple"
data$method3[data$method3 == "5.csv"] = "adaptive"
data$method3[data$method3 == "10.csv"] = "adaptive"
data$method3[data$method3 == "20.csv"] = "adaptive"
data$method3[data$method3 == "sqrt.csv"] = "adaptive"
data$method = paste(data$method3, data$method2, sep = "_")
data$actual = data$actual / (3600*24) # make days
data$predicted = data$predicted / (3600*24) # make days
data$nr_events <- as.factor(data$nr_events)
data$method <- as.character(data$method)
dt_aucs <- ddply(data, .(dataset, nr_events, method, cls), summarize, count=length(actual), auc=mae(actual, predicted))
ggplot(dt_aucs, aes(x=as.numeric(nr_events), y=auc, color=method)) + geom_point() + geom_line() + theme_bw() + facet_wrap(~dataset, scales="free")
# stability
dt_stability_cases <- ddply(data, .(dataset, method, cls, case_id), summarize, std=sd(predicted-actual))
dt_stability_cases <- dt_stability_cases[!is.na(dt_stability_cases),]
dt_stability <- ddply(dt_stability_cases, .(dataset, method, cls), summarize, mean_std=mean(std, na.rm=TRUE), std_std=sd(std, na.rm=TRUE))
#dt_stability <- dt_stability[!is.na(dt_stability),]
dt_stability <- dt_stability[1:nrow(dt_stability)-1,]
write.table(dt_stability, "instability_orig.csv", sep=";", row.names=FALSE, col.names=TRUE)
ggplot(dt_stability, aes(x=factor(method), y=mean_std, fill=method, group=method)) + geom_bar(stat="identity") + theme_bw() + facet_wrap(~dataset, scales="free")
#ggplot(dt_stability, aes(x=factor(method), y=std_std, fill=method, group=method)) + geom_bar(stat="identity") + theme_bw() + facet_wrap(~dataset, scales="free")
pdf(file="instability.pdf",family="CM Roman",width=12,height=10)
p = ggplot(dt_stability, aes(x=factor(method), y=mean_std, fill=method, group=method)) +
geom_bar(stat="identity") + geom_errorbar(aes(ymin=mean_std, ymax=mean_std+std_std)) +
theme_bw() + facet_wrap(~dataset, scales="free")
print(p)
dev.off()
embed_fonts("instability.pdf",outfile="instability.pdf")
stargazer(dt_stability, summary=FALSE)
library(hydroGOF)
library(plyr)
library(ggplot2)
library(stargazer)
setwd("detailed/")
remove_prefix_nr_from_caseid <- function(row) {
case_id <- row["case_id"]
parts <- strsplit(case_id, "_")[[1]]
cut_length <- ifelse(as.numeric(row["nr_events"]) < 2, length(parts), length(parts)-1)
return(paste(parts[1:cut_length], collapse="_"))
}
result_files1 <- list.files()[grep(paste("^validation_FA2_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
result_files2 <- list.files()[grep(paste("^validation_direct_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
data <- data.frame()
for (filename in result_files1) {
tmp <- read.table(filename, sep=";", header=T, na.strings=c("None"))
#if (!grepl("lstm", filename)) {
tmp$case_id <- as.character(tmp$case_id)
tmp$nr_events <- as.numeric(as.character(tmp$nr_events))
tmp$case_id <- apply(tmp, 1, remove_prefix_nr_from_caseid)
datasetname = strsplit(filename,"_zero")[[1]][1]
tmp$dataset = strsplit(datasetname,"FA2_")[[1]][2]
tmp$method2 = "FA"
tmp$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
#}
data <- rbind(data, tmp)
}
for (filename in result_files2) {
tmp <- read.table(filename, sep=";", header=T, na.strings=c("None"))
#if (!grepl("lstm", filename)) {
tmp$case_id <- as.character(tmp$case_id)
tmp$nr_events <- as.numeric(as.character(tmp$nr_events))
tmp$case_id <- apply(tmp, 1, remove_prefix_nr_from_caseid)
datasetname = strsplit(filename,"_zero")[[1]][1]
tmp$dataset = strsplit(datasetname,"direct_")[[1]][2]
tmp$method2 = "regression"
tmp$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
#}
data <- rbind(data, tmp)
}
data$method3[data$method3 == "3000000.csv"] = "mean"
data$method3[data$method3 == "30.csv" & data$method2 == "FA"] = "predictive"
data$method3[data$method3 == "30.csv" & data$method2 == "regression"] = "simple"
data$method3[data$method3 == "5.csv"] = "adaptive"
data$method3[data$method3 == "10.csv"] = "adaptive"
data$method3[data$method3 == "20.csv"] = "adaptive"
data$method3[data$method3 == "sqrt.csv"] = "adaptive"
data$method = paste(data$method3, data$method2, sep = "_")
data$actual = data$actual / (3600*24) # make days
data$predicted = data$predicted / (3600*24) # make days
data$nr_events <- as.factor(data$nr_events)
data$method <- as.character(data$method)
dt_aucs <- ddply(data, .(dataset, nr_events, method, cls), summarize, count=length(actual), auc=mae(actual, predicted))
ggplot(dt_aucs, aes(x=as.numeric(nr_events), y=auc, color=method)) + geom_point() + geom_line() + theme_bw() + facet_wrap(~dataset, scales="free")
# stability
dt_stability_cases <- ddply(data, .(dataset, method, cls, case_id), summarize, std=sd(predicted-actual))
dt_stability_cases <- dt_stability_cases[!is.na(dt_stability_cases),]
dt_stability <- ddply(dt_stability_cases, .(dataset, method, cls), summarize, mean_std=mean(std, na.rm=TRUE), std_std=sd(std, na.rm=TRUE))
#dt_stability <- dt_stability[!is.na(dt_stability),]
dt_stability <- dt_stability[1:nrow(dt_stability)-1,]
write.table(dt_stability, "instability_orig.csv", sep=";", row.names=FALSE, col.names=TRUE)
ggplot(dt_stability, aes(x=factor(method), y=mean_std, fill=method, group=method)) + geom_bar(stat="identity") + theme_bw() + facet_wrap(~dataset, scales="free")
#ggplot(dt_stability, aes(x=factor(method), y=std_std, fill=method, group=method)) + geom_bar(stat="identity") + theme_bw() + facet_wrap(~dataset, scales="free")
pdf(file="instability.pdf",family="CM Roman",width=12,height=10)
p = ggplot(dt_stability, aes(x=factor(method), y=mean_std, fill=method, group=method)) +
geom_bar(stat="identity") + geom_errorbar(aes(ymin=mean_std, ymax=mean_std+std_std)) +
theme_bw() + facet_wrap(~dataset, scales="free")
print(p)
dev.off()
embed_fonts("instability.pdf",outfile="instability.pdf")
stargazer(dt_stability, summary=FALSE)
library(hydroGOF)
library(plyr)
library(ggplot2)
library(stargazer)
library(extrafont)
library(gridExtra)
font_install("fontcm")
loadfonts()
setwd("detailed/")
remove_prefix_nr_from_caseid <- function(row) {
case_id <- row["case_id"]
parts <- strsplit(case_id, "_")[[1]]
cut_length <- ifelse(as.numeric(row["nr_events"]) < 2, length(parts), length(parts)-1)
return(paste(parts[1:cut_length], collapse="_"))
}
result_files1 <- list.files()[grep(paste("^validation_FA2_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
result_files2 <- list.files()[grep(paste("^validation_direct_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
data <- data.frame()
for (filename in result_files1) {
tmp <- read.table(filename, sep=";", header=T, na.strings=c("None"))
#if (!grepl("lstm", filename)) {
tmp$case_id <- as.character(tmp$case_id)
tmp$nr_events <- as.numeric(as.character(tmp$nr_events))
tmp$case_id <- apply(tmp, 1, remove_prefix_nr_from_caseid)
datasetname = strsplit(filename,"_zero")[[1]][1]
tmp$dataset = strsplit(datasetname,"FA2_")[[1]][2]
tmp$method2 = "FA"
tmp$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
#}
data <- rbind(data, tmp)
}
for (filename in result_files2) {
tmp <- read.table(filename, sep=";", header=T, na.strings=c("None"))
#if (!grepl("lstm", filename)) {
tmp$case_id <- as.character(tmp$case_id)
tmp$nr_events <- as.numeric(as.character(tmp$nr_events))
tmp$case_id <- apply(tmp, 1, remove_prefix_nr_from_caseid)
datasetname = strsplit(filename,"_zero")[[1]][1]
tmp$dataset = strsplit(datasetname,"direct_")[[1]][2]
tmp$method2 = "regression"
tmp$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
#}
data <- rbind(data, tmp)
}
data$method3[data$method3 == "3000000.csv"] = "mean"
data$method3[data$method3 == "30.csv" & data$method2 == "FA"] = "predictive"
data$method3[data$method3 == "30.csv" & data$method2 == "regression"] = "simple"
data$method3[data$method3 == "5.csv"] = "adaptive"
data$method3[data$method3 == "10.csv"] = "adaptive"
data$method3[data$method3 == "20.csv"] = "adaptive"
data$method3[data$method3 == "sqrt.csv"] = "adaptive"
data$method = paste(data$method3, data$method2, sep = "_")
data$actual = data$actual / (3600*24) # make days
data$predicted = data$predicted / (3600*24) # make days
data$nr_events <- as.factor(data$nr_events)
data$method <- as.character(data$method)
dt_aucs <- ddply(data, .(dataset, nr_events, method, cls), summarize, count=length(actual), auc=mae(actual, predicted))
ggplot(dt_aucs, aes(x=as.numeric(nr_events), y=auc, color=method)) + geom_point() + geom_line() + theme_bw() + facet_wrap(~dataset, scales="free")
# stability
dt_stability_cases <- ddply(data, .(dataset, method, cls, case_id), summarize, std=sd(predicted-actual))
dt_stability_cases <- dt_stability_cases[!is.na(dt_stability_cases),]
dt_stability <- ddply(dt_stability_cases, .(dataset, method, cls), summarize, mean_std=mean(std, na.rm=TRUE), std_std=sd(std, na.rm=TRUE))
#dt_stability <- dt_stability[!is.na(dt_stability),]
dt_stability <- dt_stability[1:nrow(dt_stability)-1,]
write.table(dt_stability, "instability_orig.csv", sep=";", row.names=FALSE, col.names=TRUE)
ggplot(dt_stability, aes(x=factor(method), y=mean_std, fill=method, group=method)) + geom_bar(stat="identity") + theme_bw() + facet_wrap(~dataset, scales="free")
#ggplot(dt_stability, aes(x=factor(method), y=std_std, fill=method, group=method)) + geom_bar(stat="identity") + theme_bw() + facet_wrap(~dataset, scales="free")
pdf(file="instability.pdf",family="CM Roman",width=12,height=10)
p = ggplot(dt_stability, aes(x=factor(method), y=mean_std, fill=method, group=method)) +
geom_bar(stat="identity") + geom_errorbar(aes(ymin=mean_std, ymax=mean_std+std_std)) +
theme_bw() + facet_wrap(~dataset, scales="free")
print(p)
dev.off()
embed_fonts("instability.pdf",outfile="instability.pdf")
stargazer(dt_stability, summary=FALSE)
library(hydroGOF)
library(plyr)
library(ggplot2)
library(stargazer)
library(extrafont)
library(gridExtra)
font_install("fontcm")
loadfonts()
setwd("detailed/")
remove_prefix_nr_from_caseid <- function(row) {
case_id <- row["case_id"]
parts <- strsplit(case_id, "_")[[1]]
cut_length <- ifelse(as.numeric(row["nr_events"]) < 2, length(parts), length(parts)-1)
return(paste(parts[1:cut_length], collapse="_"))
}
result_files1 <- list.files()[grep(paste("^validation_FA2_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
result_files2 <- list.files()[grep(paste("^validation_direct_(?=.*\\.csv)", sep=''), list.files(), perl=TRUE)]
data <- data.frame()
for (filename in result_files1) {
tmp <- read.table(filename, sep=";", header=T, na.strings=c("None"))
if (!grepl("index", filename)) {
tmp$case_id <- as.character(tmp$case_id)
tmp$nr_events <- as.numeric(as.character(tmp$nr_events))
tmp$case_id <- apply(tmp, 1, remove_prefix_nr_from_caseid)
datasetname = strsplit(filename,"_zero")[[1]][1]
tmp$dataset = strsplit(datasetname,"FA2_")[[1]][2]
tmp$method2 = "FA"
tmp$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
}
data <- rbind(data, tmp)
}
for (filename in result_files2) {
tmp <- read.table(filename, sep=";", header=T, na.strings=c("None"))
if (!grepl("index", filename)) {
tmp$case_id <- as.character(tmp$case_id)
tmp$nr_events <- as.numeric(as.character(tmp$nr_events))
tmp$case_id <- apply(tmp, 1, remove_prefix_nr_from_caseid)
datasetname = strsplit(filename,"_zero")[[1]][1]
tmp$dataset = strsplit(datasetname,"direct_")[[1]][2]
tmp$method2 = "regression"
tmp$method3 = strsplit(filename,"_")[[1]][length(strsplit(filename,"_")[[1]])]
}
data <- rbind(data, tmp)
}
data$method3[data$method3 == "3000000.csv"] = "mean"
data$method3[data$method3 == "30.csv" & data$method2 == "FA"] = "predictive"
data$method3[data$method3 == "30.csv" & data$method2 == "regression"] = "simple"
data$method3[data$method3 == "5.csv"] = "adaptive"
data$method3[data$method3 == "10.csv"] = "adaptive"
data$method3[data$method3 == "20.csv"] = "adaptive"
data$method3[data$method3 == "sqrt.csv"] = "adaptive"
data$method = paste(data$method3, data$method2, sep = "_")
data$actual = data$actual / (3600*24) # make days
data$predicted = data$predicted / (3600*24) # make days
data$nr_events <- as.factor(data$nr_events)
data$method <- as.character(data$method)
dt_aucs <- ddply(data, .(dataset, nr_events, method, cls), summarize, count=length(actual), auc=mae(actual, predicted))
ggplot(dt_aucs, aes(x=as.numeric(nr_events), y=auc, color=method)) + geom_point() + geom_line() + theme_bw() + facet_wrap(~dataset, scales="free")
# stability
dt_stability_cases <- ddply(data, .(dataset, method, cls, case_id), summarize, std=sd(predicted-actual))
dt_stability_cases <- dt_stability_cases[!is.na(dt_stability_cases),]
dt_stability <- ddply(dt_stability_cases, .(dataset, method, cls), summarize, mean_std=mean(std, na.rm=TRUE), std_std=sd(std, na.rm=TRUE))
#dt_stability <- dt_stability[!is.na(dt_stability),]
dt_stability <- dt_stability[1:nrow(dt_stability)-1,]
write.table(dt_stability, "instability_orig.csv", sep=";", row.names=FALSE, col.names=TRUE)
ggplot(dt_stability, aes(x=factor(method), y=mean_std, fill=method, group=method)) + geom_bar(stat="identity") + theme_bw() + facet_wrap(~dataset, scales="free")
#ggplot(dt_stability, aes(x=factor(method), y=std_std, fill=method, group=method)) + geom_bar(stat="identity") + theme_bw() + facet_wrap(~dataset, scales="free")
pdf(file="instability.pdf",family="CM Roman",width=12,height=10)
p = ggplot(dt_stability, aes(x=factor(method), y=mean_std, fill=method, group=method)) +
geom_bar(stat="identity") + geom_errorbar(aes(ymin=mean_std, ymax=mean_std+std_std)) +
theme_bw() + facet_wrap(~dataset, scales="free")
print(p)
dev.off()
embed_fonts("instability.pdf",outfile="instability.pdf")
stargazer(dt_stability, summary=FALSE)
